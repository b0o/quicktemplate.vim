// This file is automatically generated by qtc from "foo.qtpl".
// See https://github.com/valyala/quicktemplate for details.

// Foo
//

//line foo.qtpl:3
package foo

// 	plain on the top level becomes
// 	a go comment

//line foo.qtpl:10
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line foo.qtpl:10
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line foo.qtpl:11
var a = "foobar"

// 	global    plain

// global    collapsespace

//line foo.qtpl:22
type iQux interface {
	//line foo.qtpl:22
	Foo(a int) string
	//line foo.qtpl:22
	StreamFoo(qw422016 *qt422016.Writer, a int)
	//line foo.qtpl:22
	WriteFoo(qq422016 qtio422016.Writer, a int)
	//line foo.qtpl:22
	Bar(a int, b string) string
	//line foo.qtpl:22
	StreamBar(qw422016 *qt422016.Writer, a int, b string)
	//line foo.qtpl:22
	WriteBar(qq422016 qtio422016.Writer, a int, b string)
//line foo.qtpl:22
}

//line foo.qtpl:27
func streamabc(qw422016 *qt422016.Writer) {
	//line foo.qtpl:27
	qw422016.N().S(`
	`)
	//line foo.qtpl:28
	qw422016.N().S(`
		func    plain
		{%s "foo" %}
	`)
	//line foo.qtpl:31
	qw422016.N().S(`
	`)
	//line foo.qtpl:32
	qw422016.N().S(`func    stripspace`)
	//line foo.qtpl:34
	qw422016.N().S(`

	`)
	//line foo.qtpl:36
	a := []string{"lorem", "ipsum"}
	mystr := ""
	for s := range a {
		mystr += s
	}

	//line foo.qtpl:41
	qw422016.N().S(`
	`)
	//line foo.qtpl:42
	qw422016.E().S(mystr)
	//line foo.qtpl:42
	qw422016.N().S(`

	`)
	//line foo.qtpl:44
	if 1 == 1 {
		//line foo.qtpl:44
		qw422016.N().S(`
		`)
		//line foo.qtpl:45
		for i := 0; i < n; i++ {
			//line foo.qtpl:45
			qw422016.N().S(`
				num`)
			//line foo.qtpl:46
			qw422016.N().S(` `)
			//line foo.qtpl:46
			qw422016.N().D(i)
			//line foo.qtpl:46
			qw422016.N().S(`
`)
			//line foo.qtpl:46
			qw422016.N().S(`
		`)
			//line foo.qtpl:47
		}
		//line foo.qtpl:47
		qw422016.N().S(`
		bar
	`)
		//line foo.qtpl:49
	}
	//line foo.qtpl:49
	qw422016.N().S(`

	`)
	//line foo.qtpl:51
	switch a {
	//line foo.qtpl:52
	case "foo":
		//line foo.qtpl:52
		qw422016.N().S(`
			bar
		`)
	//line foo.qtpl:54
	case "qux":
		//line foo.qtpl:54
		qw422016.N().S(`
			lorem
		`)
	//line foo.qtpl:56
	default:
		//line foo.qtpl:56
		qw422016.N().S(`
			ipsum
	`)
		//line foo.qtpl:58
	}
	//line foo.qtpl:58
	qw422016.N().S(`

	`)
	//line foo.qtpl:60
	qw422016.N().S(`Hello World
`)
	//line foo.qtpl:60
	qw422016.N().S(`
	`)
	//line foo.qtpl:61
	qw422016.E().S(math.complex(math.pi / 2))
	//line foo.qtpl:61
	qw422016.N().S(`
	`)
	//line foo.qtpl:62
	time.StreamNow(qw422016)
	//line foo.qtpl:62
	qw422016.N().S(`
	`)
	//line foo.qtpl:66
	qw422016.N().S(`
	`)
	//line foo.qtpl:67
	qw422016.N().D(fooBar())
	//line foo.qtpl:67
	qw422016.N().S(`

	`)
	//line foo.qtpl:69
	qw422016.N().S(`
		Plain on the inside of a func
		is added to the output
		Tags are ignored: {% asd %}
	`)
	//line foo.qtpl:73
	qw422016.N().S(`
`)
//line foo.qtpl:74
}

//line foo.qtpl:74
func writeabc(qq422016 qtio422016.Writer) {
	//line foo.qtpl:74
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line foo.qtpl:74
	streamabc(qw422016)
	//line foo.qtpl:74
	qt422016.ReleaseWriter(qw422016)
//line foo.qtpl:74
}

//line foo.qtpl:74
func abc() string {
	//line foo.qtpl:74
	qb422016 := qt422016.AcquireByteBuffer()
	//line foo.qtpl:74
	writeabc(qb422016)
	//line foo.qtpl:74
	qs422016 := string(qb422016.B)
	//line foo.qtpl:74
	qt422016.ReleaseByteBuffer(qb422016)
	//line foo.qtpl:74
	return qs422016
//line foo.qtpl:74
}
